import unittest
from transportmodels import Transport, TransModel


class TestTransport(unittest.TestCase):

    def test_solve1(self):
        t = Transport()
        t.set_supplies([200, 250])
        t.set_demands([100, 150, 200])
        t.set_cost_matrix([[90, 70, 100], [80, 65, 75]])
        t.solve()

        x = [[50.0, 150.0, 0.0], [50.0, 0.0, 200.0]]
        v = 34000.0
        self.assertEqual(t.get_solution(), x)
        self.assertEqual(t.get_objective_value(), v)

    def test_solve2(self):
        t = Transport()
        t.set_supplies([5, 7, 3])
        t.set_demands([7, 3, 5])
        t.set_cost_matrix([[3, 1, 100], [4, 2, 4], [100, 3, 3]])
        t.solve()
        x = [[5.0, 0.0, 0.0], [2.0, 3.0, 2.0], [0.0, 0.0, 3.0]]
        v = 46.0
        self.assertEqual(t.get_solution(), x)
        self.assertEqual(t.get_objective_value(), v)


class TestTransModel(unittest.TestCase):

    def test_solve1(self):
        quota_vectors = [5, 7, 3, -7, -3, -5]
        cost_matrix = [[0, 0, 0, 3, 1, 100], [0, 0, 0, 4, 2, 4], [0, 0, 0, 100, 3, 3],
                       [3, 4, 100, 0, 0, 0], [1, 2, 3, 0, 0, 0], [100, 4, 3, 0, 0, 0]]
        t = TransModel()
        t.set_quota_vectors(quota_vectors)
        t.set_cost_matrix(cost_matrix)
        t.solve()

        x = [[5.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 3.0, 2.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 3.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
             [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
        v = 46.0
        self.assertEqual(t.get_solutions(), x)
        self.assertEqual(t.get_objective_values(), v)

    def test_solve2(self):
        quota_vectors = [[5, 7, 3, -7, -3, -5],
                         [5, -7, 3, 7, -3, -5],
                         [5, 7, -3, -7, 3, -5],
                         [-5, 7, 3, -7, -3, 5]
                         ]
        cost_matrix = [[0, 0, 0, 3, 1, 100], [0, 0, 0, 4, 2, 4], [0, 0, 0, 100, 3, 3],
                       [3, 4, 100, 0, 0, 0], [1, 2, 3, 0, 0, 0], [100, 4, 3, 0, 0, 0]]
        t = TransModel()
        t.set_quota_vectors(quota_vectors)
        t.set_cost_matrix(cost_matrix)
        t.solve()
        x = [[[5.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 3.0, 2.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 3.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[4.0, 0.9999999999999998, 0.0, 0.0, 0.0, 0.0], [3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 2.0, 5.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[0.0, 5.0, 0.0, 0.0, 0.0, 0.0], [3.0, 2.0, 2.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 3.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[2.0, 2.0, 3.0, 0.0, 0.0, 0.0], [3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 5.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]]
        v = [46.0, 0.9999999999999998, 31.0, 14.0]
        self.assertEqual(t.get_solutions(), x)
        self.assertEqual(t.get_objective_values(), v)

    def test_solve3(self):
        quota_vectors = [[5, 7, 3, -7, -3, -5],
                         [5, -7, 3, 7, -3, -5],
                         [5, 7, -3, -7, 3, -5],
                         [-5, 7, 3, -7, -3, 5]
                         ]
        cost_matrix = [[0, 0, 0, 3, 1, 100], [0, 0, 0, 4, 2, 4], [0, 0, 0, 100, 3, 3],
                       [3, 4, 100, 0, 0, 0], [1, 2, 3, 0, 0, 0], [100, 4, 3, 0, 0, 0]]
        t = TransModel()
        t.set_processors(3)
        t.set_quota_vectors(quota_vectors)
        t.set_cost_matrix(cost_matrix)
        t.solve()
        x = [[[5.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2.0, 3.0, 2.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 3.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[4.0, 0.9999999999999998, 0.0, 0.0, 0.0, 0.0], [3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 2.0, 5.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[0.0, 5.0, 0.0, 0.0, 0.0, 0.0], [3.0, 2.0, 2.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 3.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]],
             [[2.0, 2.0, 3.0, 0.0, 0.0, 0.0], [3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 5.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
              [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]]
        v = [46.0, 0.9999999999999998, 31.0, 14.0]
        self.assertEqual(t.get_solutions(), x)
        self.assertEqual(t.get_objective_values(), v)


if __name__ == '__main__':
    unittest.main()

